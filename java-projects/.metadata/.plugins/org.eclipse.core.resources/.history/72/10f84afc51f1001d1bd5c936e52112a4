package in.conceptarchitect.collections.specs;

import static org.junit.Assert.assertFalse;
import static org.junit.Assert.assertNotNull;
import static org.junit.Assert.assertTrue;
import static org.junit.Assert.fail;
import static org.junit.Assume.assumeTrue;

import org.junit.Before;
import org.junit.Ignore;
import org.junit.Test;

import in.conceptarchitect.collections.FixedStack;
import in.conceptarchitect.collections.StackOverflowException;

public class FixedStackSpecs {

	//Arrange
	int size=3;
	FixedStack<Integer> stack;
	
	@Before
	public void arrange() {
		stack=new FixedStack<Integer>(size);
	}
	
	@Test
	//@Ignore
	public void stackShouldBeCreatedWithFixedSize() {
		//Arrange
		
		//Act
		FixedStack stack=new FixedStack(size);
		
		//Assert
		assertNotNull(stack);
		
		
		
	}

	@Test
	
	public void stackShouldBeInitallyEmpty() {
		
		//ACT
		
		//Assert
		assertTrue(stack.isEmpty());
	}
	
	@Test
	
	public void pushingAnItemToStackMakesItNonEmpty() {
		//Arrange
		
		//Act
		stack.push(20);
		
		//Assert
		assertFalse(stack.isEmpty());
	}
	
	@Test
	
	public void pushingAnItemsLessThanSizeMakesStackNonFull() {
		//Arrange
		
		//Act
		for(int i=0;i<size-1;i++)
			stack.push(i);
		
		//Assert
		assertFalse(stack.isFull());
	}
	
	@Test
	
	public void pushingItemsEqualsStackSizeMakesItFull() {
		//Arrange
		
		//Act
		for(int i=0;i<size;i++)
			stack.push(i);
		
		//Assert
		assertTrue(stack.isFull());
	}
	
	@Test	
	public void pushingToAFullStackCausesStackOverflowException() {
		//Arrange ---> make stack full
		for(int i=0;i<size;i++)
			stack.push(i);
		
		//Assume ---> makes sure pre-condition is met
		assumeTrue(stack.isFull());
		
		//ACT
		try {
			stack.push(100);
			//Assert
			fail("expected exception 'StackOverflow was not thrown'");
		} catch(StackOverflowException ex) {
			
			//Test passed. do nothing.
		}
	}
	
	@Test
	@Ignore
	public void poppingFromAFullStackMakesItNonFull() {
		fail("Not Yet Implemented");
	}
	
	@Test
	@Ignore
	public void poppingFromAnEmptyStackThrowsStackUnderflowException() {
		fail("Not Yet Implemented");
	}
	
	
}
